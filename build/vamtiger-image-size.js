#!/usr/bin/env node
"use strict";function _interopDefault(e){return e&&"object"==typeof e&&"default"in e?e.default:e}var CommandlineArgs,ExportFormat,ErrorMessage,https=require("https"),fs=require("fs"),path=require("path"),crypto=require("crypto"),getFolderContent=_interopDefault(require("vamtiger-get-directory-content")),createFolder=_interopDefault(require("vamtiger-create-directory")),util=require("util"),sizeOf=require("image-size"),isRemoteUrl=_interopDefault(require("vamtiger-is-remote-url")),bash=_interopDefault(require("vamtiger-bash")),Args=_interopDefault(require("vamtiger-argv/build/main")),Require=_interopDefault(require("vamtiger-require")),createFile=_interopDefault(require("vamtiger-create-file"));!function(e){e.image="image",e.requireImages="require-images",e.output="output",e.exportFormat="export-format"}(CommandlineArgs||(CommandlineArgs={})),function(e){e.ts="ts",e.js="js",e.json="json",e.jsonLd="json-ld",e.jsonLdJs="json-ld-js",e.jsonLdTs="json-ld-ts"}(ExportFormat||(ExportFormat={})),function(e){e.noPathDefine="No image(s) defined"}(ErrorMessage||(ErrorMessage={}));const jsonExportFormat=new Set([ExportFormat.json,ExportFormat.js,ExportFormat.ts]),jsonLdExportFormat=new Set([ExportFormat.jsonLd,ExportFormat.jsonLdJs,ExportFormat.jsonLdTs]),tempFolder=path.resolve(__dirname,"temp");function getImageFilePath({imagePath:e}){return new Promise(async(t,r)=>{const a=[];!new Set(await getFolderContent(__dirname)).has("temp")&&await createFolder(tempFolder),https.request(e,o=>{o.on("data",e=>a.push(e)),o.on("end",()=>getImageFilePath$1({url:e,buffer:Buffer.concat(a)}).then(t)),o.on("error",r)}).end()})}function getImageFilePath$1({url:e,buffer:t}){return new Promise((r,a)=>{const o=crypto.createHash("md5").update(e).digest("hex"),i=path.resolve(tempFolder,o);try{const e=fs.createWriteStream(i);e.on("close",()=>r(i)),e.write(t),e.close()}catch(e){console.warn(e)}return i})}const getImageSize=util.promisify(sizeOf);async function getImageSize$1({imagePath:e}){const t=await isRemoteUrl({url:e})&&await getImageFilePath({imagePath:e})||e,r=t&&await getImageSize(t),a=r&&Object.assign({},r),o=t&&`rm "${t}"`;return o&&await bash(o),a}const{stringify:stringify}=JSON,{cwd:cwd}=process,workingDirectory=cwd(),args=new Args,images=args.has(CommandlineArgs.image)&&args.getAll(CommandlineArgs.image).map(e=>path.resolve(workingDirectory,e)),requireImages=args.has(CommandlineArgs.requireImages)&&args.get(CommandlineArgs.requireImages)&&path.resolve(workingDirectory,args.get(CommandlineArgs.requireImages)),output=args.has(CommandlineArgs.output)&&args.get(CommandlineArgs.output)&&path.resolve(workingDirectory,args.get(CommandlineArgs.output)),exportFormat=args.has(CommandlineArgs.exportFormat)&&args.get(CommandlineArgs.exportFormat)||output&&path.parse(output).ext.slice(1),requiredImages=requireImages&&Require({path:requireImages}),imagePaths=images||Array.isArray(requiredImages)&&requiredImages||[],createdUsing="vamtiger-image-size",date=(new Date).toISOString(),jsonLdBase={"@context":"http://schema.org","@type":"QuantitativeValue",unitText:"px",disambiguatingDescription:`This was created using ${createdUsing} on ${date}`};async function getImageSizes({imagePaths:e}){const t=(await Promise.all(e.map(e=>getImageSize$1({imagePath:e})))).filter(e=>e),r=t.length&&exportFormat&&jsonExportFormat.has(exportFormat)&&stringify(t),a=r&&exportFormat===ExportFormat.js&&`module.exports = ${r};`,o=r&&exportFormat===ExportFormat.ts&&`export default ${r}`,i=t.length&&exportFormat&&jsonLdExportFormat.has(exportFormat)&&stringify(t.map(({width:e,height:t,type:r})=>({width:Object.assign({},jsonLdBase,{name:`${r} image width`,description:`${r} image width of ${e}${jsonLdBase.unitText}`,value:e}),height:Object.assign({},jsonLdBase,{name:`${r} image height`,description:`${r} image height of ${t}${jsonLdBase.unitText}`,value:t})}))),s=i&&exportFormat===ExportFormat.jsonLdJs&&`module.exports = ${i};`,n=i&&exportFormat===ExportFormat.jsonLdTs&&`export default ${i};`,m=o||a||r||n||s||i;return output&&m&&await createFile(output,m),t}function handleError(e){throw e}imagePaths.length&&getImageSizes({imagePaths:imagePaths}).catch(handleError),module.exports=getImageSizes;
//# sourceMappingURL=vamtiger-image-size.js.map
