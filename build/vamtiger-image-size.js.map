{"version":3,"file":"vamtiger-image-size.js","sources":["../source/types.ts","../source/get-image-file-path.ts","../source/get-image-size.ts","../source/vamtiger-image-size.ts"],"sourcesContent":["export enum CommandlineArgs {\n    image = 'image',\n    requireImages = 'require-images',\n    output = 'output',\n    exportFormat = 'export-format'\n}\n\nexport enum ExportFormat {\n    ts = 'ts',\n    js = 'js',\n    json = 'json',\n    jsonLd = 'json-ld',\n    jsonLdJs = 'json-ld-js',\n    jsonLdTs = 'json-ld-ts'\n}\n\nexport enum ErrorMessage {\n    noPathDefine = 'No image(s) defined'\n}\n\nexport interface IGetImageSize {\n    imagePath: string;\n}\n\nexport interface IGetImageSizeMain {\n    imagePaths: string[];\n}\n\nexport interface IGetImageFilePath extends IGetImageSize{}\n\nexport interface IImageSize {\n    width: number;\n    height: number;\n    type: string;\n    orientation?: number | undefined;\n}\n\nexport interface IJsonLd {\n    '@context': 'http://schema.org',\n    '@type': 'QuantitativeValue',\n    unitText: 'px',\n    disambiguatingDescription: string,\n    name: string,\n    description: string,\n    value: number\n}\n\nexport interface IJsonLdImageSize {\n    width: IJsonLd;\n    height: IJsonLd;\n}\n\nexport type JsonLdImageSizes = IJsonLdImageSize[];\n\nexport const jsonExportFormat = new Set([\n    ExportFormat.json,\n    ExportFormat.js,\n    ExportFormat.ts\n]);\n\nexport const jsonLdExportFormat = new Set([\n    ExportFormat.jsonLd,\n    ExportFormat.jsonLdJs,\n    ExportFormat.jsonLdTs\n]);","import { request } from 'https';\nimport { createWriteStream } from 'fs';\nimport { resolve as resolvePath } from 'path';\nimport { createHash } from 'crypto';\nimport getFolderContent from 'vamtiger-get-directory-content';\nimport createFolder from 'vamtiger-create-directory';\nimport { IGetImageFilePath } from './types';\n\nconst tempFolder = resolvePath(\n    __dirname,\n    'temp'\n);\n\nexport default function ({imagePath: url}: IGetImageFilePath) {return new Promise(async (resolve: (imageFilePath: string) => void, reject) => {\n    const folderContent = new Set(await getFolderContent(__dirname));\n    const chunks: Uint8Array[] = [];\n\n    !folderContent.has('temp') && await createFolder(tempFolder);\n\n    request(url, request => {\n        request.on('data', chunk => chunks.push(chunk));\n\n        request.on('end', () => getImageFilePath({url, buffer: Buffer.concat(chunks)}).then(resolve));\n\n        request.on('error', reject);\n    }).end();\n})}\n\nfunction getImageFilePath({url, buffer}: {url: string; buffer: Buffer}) {return new Promise((resolve: (imageFilePath: string) => void, reject) => {\n    const urlHash = createHash('md5').update(url).digest('hex');\n    const imageFilePath = resolvePath(\n        tempFolder,\n        urlHash\n    );\n\n    try {\n        const imageFile = createWriteStream(imageFilePath);\n\n        imageFile.on('close', () => resolve(imageFilePath));\n\n        imageFile.write(buffer);\n        imageFile.close();\n    } catch(error) {\n        console.warn(error);\n    }\n\n    return imageFilePath;\n})}","import { promisify } from 'util';\nimport * as sizeOf from 'image-size';\nimport isRemoteUrl from 'vamtiger-is-remote-url';\nimport bash from 'vamtiger-bash';\nimport { IGetImageSize } from './types';\nimport getImageFilePath from './get-image-file-path';\n\nconst getImageSize = promisify(sizeOf);\n\nexport default async function({ imagePath }: IGetImageSize) {\n    const remoteUrl = await isRemoteUrl({url: imagePath});\n    const remoteImagePath = remoteUrl && await getImageFilePath({ imagePath });\n    const imageFilePath = remoteImagePath || imagePath;\n    const imageInfo = imageFilePath && await getImageSize(imageFilePath);\n    const imageSize = imageInfo && {...imageInfo};\n    const remove = imageFilePath && `rm \"${imageFilePath}\"`;\n\n    remove && await bash(remove);\n\n    return imageSize;\n}","import { parse as parsePath, resolve as resolvePath } from 'path';\nimport Args from 'vamtiger-argv/build/main';\nimport { IGetImageSizeMain, IImageSize, CommandlineArgs, ExportFormat, jsonLdExportFormat, jsonExportFormat } from './types';\nimport Require from 'vamtiger-require';\nimport createFile from 'vamtiger-create-file';\nimport getImageSize from './get-image-size';\n\nconst { stringify } = JSON;\nconst { cwd } = process;\nconst workingDirectory = cwd();\nconst args = new Args();\nconst images = args.has(CommandlineArgs.image) && args\n    .getAll(CommandlineArgs.image)\n    .map(image => resolvePath(workingDirectory, image));\nconst requireImages = args.has(CommandlineArgs.requireImages) && args.get(CommandlineArgs.requireImages) && resolvePath(\n    workingDirectory,\n    args.get(CommandlineArgs.requireImages) as string\n);\nconst output = args.has(CommandlineArgs.output) && args.get(CommandlineArgs.output) && resolvePath(\n    workingDirectory,\n    args.get(CommandlineArgs.output) as string\n);\nconst exportFormat = (args.has(CommandlineArgs.exportFormat) && args.get(CommandlineArgs.exportFormat) || output && parsePath(output).ext.slice(1)) as ExportFormat;\nconst requiredImages = requireImages && Require({path: requireImages});\nconst imagePaths = images || Array.isArray(requiredImages) && requiredImages as string[] || [];\nconst createdUsing = 'vamtiger-image-size';\nconst date = new Date().toISOString();\nconst jsonLdBase = {\n    '@context': 'http://schema.org',\n    '@type': 'QuantitativeValue',\n    unitText: 'px',\n    disambiguatingDescription: `This was created using ${createdUsing} on ${date}`\n};\n\nimagePaths.length && getImageSizes({imagePaths})\n    .catch(handleError);\n\nexport default async function getImageSizes({imagePaths}: IGetImageSizeMain) {\n    const currentImageSizes = await Promise.all(imagePaths.map(imagePath => getImageSize({imagePath})));\n    const imageSizes = currentImageSizes.filter(imageSize => imageSize) as IImageSize[];\n    const json = imageSizes.length && exportFormat && jsonExportFormat.has(exportFormat) && stringify(imageSizes);\n    const js = json && exportFormat === ExportFormat.js && `module.exports = ${json};`;\n    const ts = json && exportFormat === ExportFormat.ts && `export default ${json}`;\n    const jsonLd = imageSizes.length && exportFormat && jsonLdExportFormat.has(exportFormat)  && stringify(imageSizes.map(({width, height, type}) => ({\n        width: {\n            ...jsonLdBase,\n            name: `${type} image width`,\n            description: `${type} image width of ${width}${jsonLdBase.unitText}`,\n            value: width\n        },\n        height: {\n            ...jsonLdBase,\n            name: `${type} image height`,\n            description: `${type} image height of ${height}${jsonLdBase.unitText}`,\n            value: height\n        }\n    })));\n    const jsonLdJs = jsonLd && exportFormat === ExportFormat.jsonLdJs && `module.exports = ${jsonLd};`;\n    const jsonLdTs = jsonLd && exportFormat === ExportFormat.jsonLdTs && `export default ${jsonLd};`;\n    const exportText = ts || js || json || jsonLd || jsonLdJs || jsonLdTs;\n\n    output && exportText && await createFile(output, exportText);\n\n    return imageSizes;\n}\n\nfunction handleError(error: Error) {\n    throw error;\n}"],"names":["CommandlineArgs","ExportFormat","ErrorMessage","jsonExportFormat","Set","json","js","ts","jsonLdExportFormat","jsonLd","jsonLdJs","jsonLdTs","tempFolder","resolvePath","__dirname","imagePath","url","Promise","async","resolve","reject","chunks","getFolderContent","has","createFolder","request","on","chunk","push","getImageFilePath","buffer","Buffer","concat","then","end","urlHash","createHash","update","digest","imageFilePath","imageFile","createWriteStream","write","close","error","console","warn","getImageSize","promisify","sizeOf","isRemoteUrl","imageInfo","imageSize","remove","bash","stringify","JSON","cwd","process","workingDirectory","args","Args","images","image","getAll","map","requireImages","get","output","exportFormat","parsePath","ext","slice","requiredImages","Require","path","imagePaths","Array","isArray","createdUsing","date","Date","toISOString","jsonLdBase","@context","@type","unitText","disambiguatingDescription","getImageSizes","imageSizes","all","filter","length","width","height","type","name","description","value","exportText","createFile","handleError","catch"],"mappings":"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"}